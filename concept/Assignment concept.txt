#include <iostream>
#include <sstream>
#include <cctype>
#include <string>
using namespace std;

// Global variables
int charClass;          // Character classification
string lexeme;          // Stores current token
char nextChar;          // Next character from input
int nextToken;          // Token code for current lexeme
istringstream input;    // Input stream

// Character classes
#define LETTER 0
#define DIGIT 1
#define UNKNOWN 99
#define EOF_FLAG -1

// Token codes
#define INT_LIT 10
#define IDENT 11
#define ASSIGN_OP 20
#define ADD_OP 21
#define SUB_OP 22
#define MULT_OP 23
#define DIV_OP 24
#define LEFT_PAREN 25
#define RIGHT_PAREN 26

// Function prototypes
void addChar();
void getChar();
void getNonBlank();
int lex();
int lookup(char);

int main() {
    string source = "A = (B - 40) * C";  // More readable test input
    input.str(source);
    
    getChar();
    do {
        lex();
    } while (nextToken != EOF_FLAG);
    
    return 0;
}

int lookup(char ch) {
    switch (ch) {
        case '(': addChar(); nextToken = LEFT_PAREN; break;
        case ')': addChar(); nextToken = RIGHT_PAREN; break;
        case '+': addChar(); nextToken = ADD_OP; break;
        case '-': addChar(); nextToken = SUB_OP; break;
        case '*': addChar(); nextToken = MULT_OP; break;
        case '/': addChar(); nextToken = DIV_OP; break;
        case '=': addChar(); nextToken = ASSIGN_OP; break;
        default: addChar(); nextToken = EOF_FLAG; break;
    }
    return nextToken;
}

void addChar() {
    if (lexeme.length() <= 98) {
        lexeme += nextChar;
    } else {
        cerr << "Error: Lexeme too long" << endl;
    }
}

void getChar() {
    if (input.get(nextChar)) {
        if (isalpha(nextChar)) {
            charClass = LETTER;
        } else if (isdigit(nextChar)) {
            charClass = DIGIT;
        } else {
            charClass = UNKNOWN;
        }
    } else {
        charClass = EOF_FLAG;
    }
}

void getNonBlank() {
    while (isspace(nextChar)) {
        getChar();
    }
}

int lex() {
    lexeme.clear();
    getNonBlank();

    switch (charClass) {
        case LETTER:
            addChar();
            getChar();
            while (charClass == LETTER || charClass == DIGIT) {
                addChar();
                getChar();
            }
            nextToken = IDENT;
            break;
            
        case DIGIT:
            addChar();
            getChar();
            while (charClass == DIGIT) {
                addChar();
                getChar();
            }
            nextToken = INT_LIT;
            break;
            
        case UNKNOWN:
            lookup(nextChar);
            getChar();
            break;
            
        case EOF_FLAG:
            nextToken = EOF_FLAG;
            lexeme = "EOF";
            break;
    }

    cout << "Token: " << nextToken << "\tLexeme: " << lexeme << endl;
    return nextToken;
}
